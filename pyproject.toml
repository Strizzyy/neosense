[project]
name = "sourcesense-neo4j"
version = "0.1.0"
description = "SourceSense Neo4j metadata extraction app built using Atlan Application SDK"
authors = [{ name = "Atlan App Team", email = "connect@atlan.com" }]
requires-python = ">=3.11"
license = "Apache-2.0"
readme = "README.md"
dependencies = [
    "atlan-application-sdk[tests,workflows]==0.1.1rc38",
    "poethepoet",
    "neo4j>=5.0.0",
    "uvicorn[standard]",
    "fastapi",
    "httpx",
    "aiohttp",
    "python-dotenv",
]

[dependency-groups]
dev = [
    "pytest",
    "pytest-asyncio",
    "coverage",
    "pre-commit",
]

[tool.poe.tasks]
# Updated Dapr command with correct max-body-size format
start-dapr = "dapr run --enable-api-logging --log-level debug --app-id app --app-port 8080 --dapr-http-port 3500 --dapr-grpc-port 50001 --max-body-size 16 --resources-path components --enable-app-health-check --config config.yaml"
# Updated Temporal command to run on a different port to avoid conflicts
start-temporal = "temporal server start-dev --db-filename ./temporal.db --port 7234"
start-deps = { shell = "poe start-dapr & poe start-temporal &" }
# Updated stop-deps command for Windows compatibility
stop-deps = { shell = "(taskkill /F /IM daprd.exe /T & taskkill /F /IM temporal.exe /T & taskkill /F /IM temporal-server.exe /T) 2>nul || exit 0" }

[tool.poe.tasks.download-components]
interpreter = "python"
env = { SDK_VERSION = "v0.1.1rc38" }
shell = """
import pathlib, requests, os

components_dir = pathlib.Path("components")
components_dir.mkdir(exist_ok=True)

api_url = "https://api.github.com/repos/atlanhq/application-sdk/contents/components"

headers = {}
github_token = os.getenv("GITHUB_TOKEN")
if github_token:
    headers["Authorization"] = f"token {github_token}"
    print("Found GITHUB_TOKEN. Making authenticated request to GitHub API.")
else:
    print("WARNING: GITHUB_TOKEN not set. Making an unauthenticated request which may be rate-limited.")

response = requests.get(api_url, params={"ref": os.getenv("SDK_VERSION")}, headers=headers)
response.raise_for_status()

for file_info in response.json():
    if file_info["type"] == "file" and file_info["name"].endswith(".yaml"):
        raw_url = file_info["download_url"]
        file_response = requests.get(raw_url, headers=headers)
        file_response.raise_for_status()
        file_path = components_dir / file_info["name"]
        file_path.write_text(file_response.text)
        print(f"Downloaded: {file_info['name']}")
"""

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::pydantic.warnings.PydanticDeprecatedSince20"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = ["./**/*.py"]

[tool.hatch.build.targets.wheel]
include = ["./**/*.py"]
packages = [
    "app"
]

